import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import firebaseService from '../firebase-services';
import QRCode from 'qrcode';
import './ClientNotifications.css';
import './shared.css';

const ClientNotifications = () => {
  const [searchParams] = useSearchParams();
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedNotification, setSelectedNotification] = useState(null);
  const [qrCodeUrl, setQrCodeUrl] = useState('');
  const [currentUser, setCurrentUser] = useState(null);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    loadNotifications();
  }, []);

  // Handle notification parameter from URL
  useEffect(() => {
    const notificationParam = searchParams.get('notification');
    if (notificationParam && notifications.length > 0) {
      const targetNotification = notifications.find(n => n.id === notificationParam);
      if (targetNotification) {
        handleNotificationClick(targetNotification);
      }
    }
  }, [notifications, searchParams]);

  const loadNotifications = async () => {
    setLoading(true);
    setError('');
    try {
      const user = await firebaseService.getCurrentUser();
      if (!user) {
        setError('You must be logged in to view notifications.');
        return;
      }

      setCurrentUser(user);

      // Get all notifications for the user (both read and unread)
      const allNotifications = await firebaseService.db
        .collection('notifications')
        .where('userId', '==', user.uid)
        .orderBy('createdAt', 'desc')
        .get();

      const notificationsList = [];
      allNotifications.forEach(doc => {
        const data = doc.data();
        notificationsList.push({
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate ? data.createdAt.toDate() : new Date(data.createdAt)
        });
      });

      setNotifications(notificationsList);
    } catch (error) {
      console.error('Error loading notifications:', error);
      setError('Failed to load notifications. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleNotificationClick = async (notification) => {
    setSelectedNotification(notification);
    
    // Mark as read if not already read
    if (!notification.isRead) {
      try {
        await firebaseService.markNotificationAsRead(notification.id);
        // Update local state
        setNotifications(prev => 
          prev.map(n => 
            n.id === notification.id ? { ...n, isRead: true } : n
          )
        );
      } catch (error) {
        console.error('Error marking notification as read:', error);
      }
    }

    // Generate QR code if this is an approved visit notification
    if (notification.type === 'visit_approved' && notification.qrCodeData) {
      try {
        // Use the QR code data from the notification (generated by admin approval)
        const qrCodeDataUrl = await QRCode.toDataURL(JSON.stringify(notification.qrCodeData), {
          width: 256,
          margin: 2,
          color: {
            dark: '#000000',
            light: '#FFFFFF'
          }
        });
        
        setQrCodeUrl(qrCodeDataUrl);
      } catch (error) {
        console.error('Error generating QR code:', error);
        setQrCodeUrl('');
      }
    } else {
      setQrCodeUrl('');
    }
  };

  const closeModal = () => {
    setSelectedNotification(null);
    setQrCodeUrl('');
  };

  const getNotificationIcon = (type, status) => {
    switch (type) {
      case 'visit_approved':
        return '‚úÖ';
      case 'visit_rejected':
        return '‚ùå';
      case 'visit_rescheduled':
        return 'üìÖ';
      case 'visit_pending':
        return '‚è≥';
      default:
        return 'üì¢';
    }
  };

  const getNotificationColor = (type) => {
    switch (type) {
      case 'visit_approved':
        return '#10b981';
      case 'visit_rejected':
        return '#ef4444';
      case 'visit_rescheduled':
        return '#8b5cf6';
      case 'visit_pending':
        return '#f59e0b';
      default:
        return '#6366f1';
    }
  };

  const formatDate = (date) => {
    if (!date) return 'Unknown date';
    try {
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return 'Invalid date';
    }
  };

  const filteredNotifications = notifications.filter(notification => {
    if (filter === 'all') return true;
    if (filter === 'unread') return !notification.isRead;
    if (filter === 'approved') return notification.type === 'visit_approved';
    if (filter === 'rejected') return notification.type === 'visit_rejected';
    if (filter === 'rescheduled') return notification.type === 'visit_rescheduled';
    return true;
  });

  if (loading) {
    return (
      <div className="notifications-page">
        <div className="loading-message">
          <div style={{ textAlign: 'center', padding: '48px' }}>
            <div style={{ fontSize: '48px', marginBottom: '16px' }}>‚è≥</div>
            <h3>Loading notifications...</h3>
            <p>Please wait while we fetch your notifications.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="settings-page">
        <div className="modern-records-header">
        <div className="modern-records-title">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    {/* Bell body (rounded) */}
    <path d="M12 3a6 6 0 0 1 6 6v4c0 1.1.9 2 2 2H4a2 2 0 0 0 2-2V9a6 6 0 0 1 6-6z"/>
    {/* Clapper */}
    <circle cx="12" cy="19" r="1"/>
    {/* Sound waves (notification effect) */}
    <path d="M18 7.5c.5-.5 1-1 1.5-1.5"/>
    <path d="M6 7.5c-.5-.5-1-1-1.5-1.5"/>
  </svg>
       Notifications
        </div>
        <div className="notifications-actions">
          <button 
            className="btn-secondary" 
            onClick={loadNotifications}
            disabled={loading}
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <polyline points="23,4 23,10 17,10"></polyline>
              <polyline points="1,20 1,14 7,14"></polyline>
              <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
            </svg>
            Refresh
          </button>
        </div>
        </div>

      {error && (
        <div className="error-message">
          {error}
          <button 
            onClick={loadNotifications}
            style={{
              marginLeft: '12px',
              background: 'transparent',
              border: '1px solid #dc2626',
              color: '#dc2626',
              padding: '4px 8px',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '12px'
            }}
          >
            Retry
          </button>
        </div>
      )}

      <section className="notifications-filters">
        <div className="filter-buttons">
          <button 
            className={`filter-btn ${filter === 'all' ? 'active' : ''}`}
            onClick={() => setFilter('all')}
          >
            All ({notifications.length})
          </button>
          <button 
            className={`filter-btn ${filter === 'unread' ? 'active' : ''}`}
            onClick={() => setFilter('unread')}
          >
            Unread ({notifications.filter(n => !n.isRead).length})
          </button>
          <button 
            className={`filter-btn ${filter === 'approved' ? 'active' : ''}`}
            onClick={() => setFilter('approved')}
          >
            Approved ({notifications.filter(n => n.type === 'visit_approved').length})
          </button>
          <button 
            className={`filter-btn ${filter === 'rejected' ? 'active' : ''}`}
            onClick={() => setFilter('rejected')}
          >
            Rejected ({notifications.filter(n => n.type === 'visit_rejected').length})
          </button>
          <button 
            className={`filter-btn ${filter === 'rescheduled' ? 'active' : ''}`}
            onClick={() => setFilter('rescheduled')}
          >
            Rescheduled ({notifications.filter(n => n.type === 'visit_rescheduled').length})
          </button>
        </div>
      </section>

      <section className="notifications-content">
        {filteredNotifications.length === 0 ? (
          <div className="empty-notifications">
            <div className="empty-icon">üîî</div>
            <h3>No notifications found</h3>
            <p>
              {filter === 'all' 
                ? "You don't have any notifications yet." 
                : `No ${filter} notifications found.`
              }
            </p>
          </div>
        ) : (
          <div className="notifications-list">
            {filteredNotifications.map(notification => (
              <div 
                key={notification.id}
                className={`notification-card ${!notification.isRead ? 'unread' : ''}`}
                onClick={() => handleNotificationClick(notification)}
              >
                <div className="notification-icon" style={{ color: getNotificationColor(notification.type) }}>
                  {getNotificationIcon(notification.type)}
                </div>
                <div className="notification-content">
                  <div className="notification-header">
                    <h3 className="notification-title">{notification.title}</h3>
                    <span className="notification-date">{formatDate(notification.createdAt)}</span>
                  </div>
                  <p className="notification-message">{notification.message}</p>
                  {notification.type === 'visit_approved' && (
                    <div className="notification-badge approved">
                      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <path d="M9 12l2 2 4-4"></path>
                        <circle cx="12" cy="12" r="10"></circle>
                      </svg>
                      QR Code Available
                    </div>
                  )}
                  {!notification.isRead && (
                    <div className="unread-indicator"></div>
                  )}
                </div>
                <div className="notification-arrow">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <polyline points="9,18 15,12 9,6"></polyline>
                  </svg>
                </div>
              </div>
            ))}
          </div>
        )}
      </section>

      {/* Notification Detail Modal */}
      {selectedNotification && (
        <div className="modern-modal-overlay" onClick={closeModal}>
          <div className="modern-modal-container notification-modal" onClick={e => e.stopPropagation()}>
            <div className="modern-modal-header">
              <h3 className="modern-modal-title">
                <span style={{ color: getNotificationColor(selectedNotification.type) }}>
                  {getNotificationIcon(selectedNotification.type)}
                </span>
                {selectedNotification.title}
              </h3>
              <button className="modern-modal-close" onClick={closeModal}>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>
            
            <div className="modern-modal-body">
              <div className="notification-details">
                <div className="notification-message-full">
                  <p>{selectedNotification.message}</p>
                </div>

                {selectedNotification.type === 'visit_approved' && qrCodeUrl && (
                  <div className="qr-code-section">
                    <div className="qr-code-header">
                      <h4>Your Visit QR Code</h4>
                      <p>Present this QR code at the facility entrance</p>
                    </div>
                    <div className="qr-code-container">
                      <img src={qrCodeUrl} alt="Visit QR Code" className="qr-code-image" />
                    </div>
                    <div className="visit-instructions">
                      <div className="instruction-item">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <circle cx="12" cy="12" r="10"></circle>
                          <polyline points="12,6 12,12 16,14"></polyline>
                        </svg>
                        <span><strong>Be on time</strong> - Arrive 15 minutes before your scheduled visit</span>
                      </div>
                      <div className="instruction-item">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                          <polyline points="14,2 14,8 20,8"></polyline>
                        </svg>
                        <span><strong>Bring valid ID</strong> - Government-issued photo identification required</span>
                      </div>
                      <div className="instruction-item">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
                        </svg>
                        <span><strong>Follow dress code</strong> - Appropriate attire required for facility entry</span>
                      </div>
                      <div className="instruction-item">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path d="M9 12l2 2 4-4"></path>
                          <circle cx="12" cy="12" r="10"></circle>
                        </svg>
                        <span><strong>Save this QR code</strong> - Screenshot or print for your records</span>
                      </div>
                    </div>
                  </div>
                )}

                {selectedNotification.type === 'visit_rejected' && (
                  <div className="rejection-info">
                    <div className="rejection-header">
                      <h4>Visit Request Rejected</h4>
                      <p>Your visit request could not be approved at this time</p>
                    </div>
                    {selectedNotification.rejectionReason && (
                      <div className="rejection-reason">
                        <strong>Reason:</strong> {selectedNotification.rejectionReason}
                      </div>
                    )}
                    <div className="next-steps">
                      <p>You may submit a new visit request with corrected information.</p>
                    </div>
                  </div>
                )}

                {selectedNotification.type === 'visit_rescheduled' && (
                  <div className="reschedule-info">
                    <div className="reschedule-header">
                      <h4>Visit Rescheduled</h4>
                      <p>Your visit has been moved to a new date and time</p>
                    </div>
                    {selectedNotification.newVisitDate && (
                      <div className="new-schedule">
                        <strong>New Date:</strong> {selectedNotification.newVisitDate}
                        {selectedNotification.newVisitTime && (
                          <span> at {selectedNotification.newVisitTime}</span>
                        )}
                      </div>
                    )}
                    {selectedNotification.rescheduleReason && (
                      <div className="reschedule-reason">
                        <strong>Reason:</strong> {selectedNotification.rescheduleReason}
                      </div>
                    )}
                  </div>
                )}

                <div className="notification-meta">
                  <div className="meta-item">
                    <strong>Received:</strong> {formatDate(selectedNotification.createdAt)}
                  </div>
                  {selectedNotification.visitDate && (
                    <div className="meta-item">
                      <strong>Visit Date:</strong> {selectedNotification.visitDate}
                    </div>
                  )}
                  {selectedNotification.inmateName && (
                    <div className="meta-item">
                      <strong>Inmate:</strong> {selectedNotification.inmateName}
                    </div>
                  )}
                </div>
              </div>
            </div>

            <div className="modern-modal-footer">
              <button className="modern-modal-btn secondary" onClick={closeModal}>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M18 6L6 18M6 6l12 12"></path>
                </svg>
                Close
              </button>
              {selectedNotification.type === 'visit_approved' && qrCodeUrl && (
                <button 
                  className="modern-modal-btn primary"
                  onClick={() => {
                    const link = document.createElement('a');
                    link.download = `visit-qr-code-${selectedNotification.id}.png`;
                    link.href = qrCodeUrl;
                    link.click();
                  }}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="7,10 12,15 17,10"></polyline>
                    <line x1="12" y1="15" x2="12" y2="3"></line>
                  </svg>
                  Download QR Code
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ClientNotifications;